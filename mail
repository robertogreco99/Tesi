Salve professore, 
ho aggiornato i file sul server. La aggiorno sulle modifiche che ho fatto.

- Aggiunto il codice per eliminare i decodificati dopo aver lanciato il comando
- Ho creato i file json per i mos per i database AVT,GamingVideoSet e KUGVD con i relativi script. Ho aggiunto una cartella MOS e modificato il file json config di conseguenza.
- Ho aggiunto fps e duration ai file json descrizione dei dataset.
- Ora i singoli csv vengono salvati su un csv unico come mi aveva consigliato all'incontro. 
Il csv ha  colonne del tipo  : <info> <MOS> <Mos_1>...<Mos_17> <Vmaf_vmafmodel_temporalpooling> per le features vmaf e <features_temporal pooling> per le altre

Dataset,Original file name,Width original,Height original,Width,Height,Bitrate,Video Codec,FPS,Duration,Model Version,
MOS,MOS_1,MOS_2,MOS_3,MOS_4,MOS_5,MOS_6,MOS_7,MOS_8,MOS_9,MOS_10,MOS_11,MOS_12,MOS_13,MOS_14,MOS_15,MOS_16,MOS_17,CI,
vmaf_vmaf_v0.6.1.json_mean,vmaf_vmaf_v0.6.1.json_harmonic_mean,vmaf_vmaf_v0.6.1.json_geometric_mean,vmaf_vmaf_v0.6.1.json_total_variation,vmaf_vmaf_v0.6.1.json_norm_lp_1,vmaf_vmaf_v0.6.1.json_norm_lp_2,vmaf_vmaf_v0.6.1.json_norm_lp_3,v
vmaf_vmaf_v0.6.1neg.json_mean,[...] 

- Non ho ancora cominciato con i grafici, pero ora dovrebbe andare tutto e dovrei poter iniziare a fare simulazioni su questi dataset.
Procedo anche a cominciare con i due che ha aggiunto.

- Ho aggiunto tra i pooling norm_lp_1 e json_norm_lp_3
- Ho aggiunto nel csv le colonne dei modelli b ( ad esempio vmaf_ci_p95_lo_harmonic_mean)

- Ho fatto inoltre delle prove per capire come si comporta vmaf con i file a 16 bit . Le mando un file con quello che ho fatto. Ho ottenuto 
per il file 4k confrontato con il file 4k decodificato con bitdepth 10 valori del 70/80% e mettendo bitdepth 16 del 100%

- Ho fatto delle prove per sistemare il problema di dover distinguere i casi quando scelgo il modello in vmaf ma anche provando con il path non 
funziona avere un solo caso. Cioè devo distinguere i casi quando lo lancio 

( si traduce in questo codice # Set model path
if [[ "${MODEL_VERSION}" == "vmaf_b_v0.6.3.json" ]]; then
     model_version="vmaf_b_v0.6.3"
     path="version=${model_version}"
     echo "Path : $path"
elif [[ "${MODEL_VERSION}" == "vmaf_float_b_v0.6.3.json" ]]; then
     model_version="vmaf_float_b_v0.6.3"
     path="version=${model_version}"
     echo "Path : $path"
else
    path="path=/vmaf-3.0.0/model/${MODEL_VERSION}"
    echo "Path : $path"
fi
)

- In molti casi ho preso fps e duration dal nome per creare gli script dei dataset e del mos.
- Per i file dove questa cosa manca li aggiungo io a mano? (Ad esempio bigbuck_bunny_8bit_15000kbps_1080p_60.0fps_h264.mp4)
- Ho qualche dubbio su come fare per evitare di ricalcolare le features. Per ora ho fatto cosi : 
# VMAF evaluation
if [[ "${MODEL_VERSION}" == "vmaf_v0.6.1.json" ]]; then
    /vmaf-3.0.0/libvmaf/build/tools/vmaf \
       --reference "$INPUT_REFERENCE_DIR/$original" \
       --distorted "$final_decoded_file" \
       --width "$width_new" \
       --height "$height_new" \
       --pixel_format "$PIXEL_FORMAT" \
       --bitdepth "$BIT_DEPTH" \
       --model "$path" \
       $feature_args \
       --output "$output_json" --json 
else
    /vmaf-3.0.0/libvmaf/build/tools/vmaf \
       --reference "$INPUT_REFERENCE_DIR/$original" \
       --distorted "$final_decoded_file" \
       --width "$width_new" \
       --height "$height_new" \
       --pixel_format "$PIXEL_FORMAT" \
       --bitdepth "$BIT_DEPTH" \
       --model "$path" \
       --output "$output_json" --json 
fi

pero poi non saprei bene come ricopiarle alla fine per gli altri modelli. Dovrei tipo ciclare sul file una volta che li ho il csv completo 
ma è molto scomodo se faccio delle modifiche. 

- In molti casi nei file csv dei mos non ci sono tutti. Ad esempio  GamingVideoSet contiene Dota2 con i relativi file che nel file csv (GamingVideoSet1_Summaryofallresults.csv.csv)
mancano. 
In questo caso devo mettere None nel csv?


Per quanto riguarda i successivi passi pensavo di avere per quella data il file csv completo e i vari grafici.